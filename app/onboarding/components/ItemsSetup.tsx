'use client'

import { useOnboarding } from '@/contexts/OnboardingProvider'
import { useErrorHandler } from '@/hooks/useErrorHandler'
import { useItemOperations } from '@/hooks/useItemOperations'
import { useImageOperations } from '@/hooks/useImageOperations'
import { DEFAULT_VALUES } from '@/lib/constants'
import { Input, TextArea, Select } from '@/components/ui'
import Button from '@/components/ui/Button'
import { Trash2 } from 'lucide-react'
import Image from 'next/image'
import { useEffect, useState } from 'react'

const SAMPLE_ITEMS = [
  {
    name: 'Hamburguesa Clásica',
    description: 'Carne de res, lechuga, tomate, cebolla y salsa especial',
    price: 2500,
    category: 'hamburguesas',
    img: DEFAULT_VALUES.PLACEHOLDER_IMAGE,
  },
  {
    name: 'Pizza Margherita',
    description: 'Mozzarella, tomate y albahaca fresca',
    price: 3200,
    category: 'pizzas',
    img: DEFAULT_VALUES.PLACEHOLDER_IMAGE,
  },
  {
    name: 'Ensalada César',
    description: 'Lechuga romana, crutones, parmesano y aderezo césar',
    price: 1800,
    category: 'entradas',
    img: DEFAULT_VALUES.PLACEHOLDER_IMAGE,
  },
  {
    name: 'Café Americano',
    description: 'Café negro caliente',
    price: 800,
    category: 'cafe',
    img: DEFAULT_VALUES.PLACEHOLDER_IMAGE,
  },
]

export default function ItemsSetup() {
  const { data, updateData, nextStep, previousStep, skipStep, currentStep } = useOnboarding()
  const [items, setItems] = useState(data.items)
  const [isLoading, setIsLoading] = useState(false)
  const { handleSaveNewItem } = useItemOperations()
  const { handleError } = useErrorHandler()
  const { uploadImage } = useImageOperations()

  // Sync items when context data changes (e.g., when existing data is loaded)
  useEffect(() => {
    setItems(data.items)
  }, [data.items])

  const hasExistingItems = items.length > 0

  const handleAddSampleItem = (sampleItem: (typeof SAMPLE_ITEMS)[0]) => {
    const exists = items.some((item) => item.name === sampleItem.name)
    if (!exists) {
      setItems((prev) => [...prev, { ...sampleItem, id: '', isVisible: true }])
    }
  }

  const handleRemoveItem = (index: number) => {
    setItems((prev) => prev.filter((_, i) => i !== index))
  }

  const handleItemChange = (index: number, field: string, value: string | number) => {
    setItems((prev) => prev.map((item, i) => (i === index ? { ...item, [field]: value } : item)))
  }

  const validateItems = () => {
    for (const item of items) {
      if (!item.name.trim()) {
        console.log('Todos los productos deben tener un nombre')
        handleError('error', 'Todos los productos deben tener un nombre')
        return false
      }
      if (!item.description.trim()) {
        console.log('Todos los productos deben tener una descripción')
        handleError('error', 'Todos los productos deben tener una descripción')
        return false
      }
      if (item.price <= 0) {
        console.log('Todos los productos deben tener un precio válido')
        handleError('error', 'Todos los productos deben tener un precio válido')
        return false
      }
      if (!item.category.trim()) {
        console.log('Todos los productos deben tener una categoría')
        handleError('error', 'Todos los productos deben tener una categoría')
        return false
      }
    }
    return true
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (items.length === 0) {
      skipStep()
      return
    }

    if (!validateItems()) return

    setIsLoading(true)
    try {
      // Only create new items (those without an ID)
      const newItems = items.filter((item) => !item.id)
      const existingItems = items.filter((item) => item.id)

      // Create new items in Firebase
      for (const item of newItems) {
        await handleSaveNewItem({
          id: '', // Will be generated by Firebase
          name: item.name,
          description: item.description,
          price: item.price,
          category: item.category,
          img: item.img,
          isVisible: true,
        })
      }

      // Update data with all items (existing + new)
      updateData('items', items)
      nextStep()
    } catch (error) {
      handleError('error', 'Error al crear los productos')
      console.error('Error creating items:', error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="max-w-4xl mx-auto">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-gray-900 mb-4">Productos de tu menú</h2>
        <p className="text-lg text-gray-600">
          Agrega algunos productos para que tus clientes vean cómo se ve tu menú
        </p>
        {hasExistingItems && (
          <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <p className="text-blue-800">
              <strong>¡Genial!</strong> Ya tenés {items.length} producto
              {items.length !== 1 ? 's' : ''} en tu menú. Podés editarlos o agregar más productos.
            </p>
          </div>
        )}
      </div>

      {/* Sample Items */}
      <div className="mb-8">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Productos de Ejemplo</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {SAMPLE_ITEMS.map((item, index) => (
            <div key={index} className="border border-gray-200 rounded-lg p-4">
              <div className="flex items-start space-x-4">
                <Image
                  src={item.img}
                  alt={item.name}
                  width={64}
                  height={64}
                  className="object-cover rounded-lg"
                />
                <div className="flex-1">
                  <h4 className="font-medium text-gray-900">{item.name}</h4>
                  <p className="text-sm text-gray-600 mb-2">{item.description}</p>
                  <p className="text-sm font-medium text-indigo-600">
                    ${item.price.toLocaleString('es-AR')}
                  </p>
                </div>
                <button
                  onClick={() => handleAddSampleItem(item)}
                  disabled={items.some((existingItem) => existingItem.name === item.name)}
                  className="bg-indigo-600 text-white px-3 py-1 rounded text-sm hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {items.some((existingItem) => existingItem.name === item.name)
                    ? 'Agregado'
                    : 'Agregar'}
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Custom Items */}
      <form onSubmit={handleSubmit}>
        <div className="space-y-4 mb-6">
          <div className="flex justify-between">
            <h3 className="text-lg font-medium text-gray-900">Tus Productos</h3>
            <Button
              type="button"
              onClick={() =>
                setItems((prev) => [
                  ...prev,
                  {
                    name: '',
                    description: '',
                    price: 0,
                    category: data.categories[0]?.key || '',
                    img: DEFAULT_VALUES.PLACEHOLDER_IMAGE,
                    id: '',
                    isVisible: true,
                    // No ID means it's a new item
                  },
                ])
              }
              size="sm"
            >
              + Agregar Producto
            </Button>
          </div>

          {items.map((item, index) => (
            <div key={index} className="relative border border-gray-200 rounded-lg p-4">
              <button
                type="button"
                onClick={() => handleRemoveItem(index)}
                className="ml-4 text-red-600 hover:text-red-800 p-2 absolute top-2 right-2"
              >
                <Trash2 size={16} />
              </button>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Input
                  label="Nombre del Producto"
                  type="text"
                  value={item.name}
                  onChange={(e) => handleItemChange(index, 'name', e.target.value)}
                  placeholder="Nombre del producto"
                  containerClassName="mb-0"
                />

                <Input
                  label="Precio"
                  type="number"
                  value={item.price}
                  onChange={(e) => handleItemChange(index, 'price', Number(e.target.value))}
                  placeholder="0"
                  min="0"
                  step="1"
                  containerClassName="mb-0"
                />
              </div>

              <div className="mt-4">
                <TextArea
                  label="Descripción"
                  value={item.description}
                  onChange={(e) => handleItemChange(index, 'description', e.target.value)}
                  rows={2}
                  placeholder="Describe tu producto..."
                  containerClassName="mb-0"
                />
              </div>

              <div className="mt-4 flex justify-between items-center">
                <div className="flex-1">
                  <Select
                    label="Categoría"
                    value={item.category}
                    onChange={(e) => handleItemChange(index, 'category', e.target.value)}
                    options={data.categories.map((category) => ({
                      value: category.key,
                      label: `${category.icon} ${category.label}`,
                    }))}
                    placeholder="Selecciona una categoría"
                    containerClassName="mb-0"
                  />
                </div>
              </div>

              {/* Image Upload */}
              <div className="mt-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Imagen del producto
                </label>
                <div className="flex items-center space-x-4">
                  <div className="w-20 h-20 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center">
                    <Image
                      src={item.img}
                      alt={item.name || 'Producto'}
                      width={80}
                      height={80}
                      className="object-cover rounded-lg"
                    />
                  </div>
                  <div className="flex-1">
                    <Input
                      type="file"
                      accept="image/*"
                      onChange={async (e) => {
                        const file = e.target.files?.[0]
                        if (file) {
                          try {
                            const imageUrl = await uploadImage(file)
                            handleItemChange(index, 'img', imageUrl)
                          } catch (error) {
                            console.error('Error uploading image:', error)
                            handleError('Error al subir la imagen', 'upload')
                          }
                        }
                      }}
                      className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100"
                    />
                    <p className="text-xs text-gray-500 mt-1">JPG, PNG o WebP. Máximo 5MB.</p>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        <div className="flex justify-between">
          <Button type="button" onClick={previousStep} disabled={currentStep === 0} variant="ghost">
            ← Anterior
          </Button>

          <div className="space-x-3 flex items-center gap-2 flex-row">
            <Button type="button" onClick={skipStep} variant="secondary">
              Omitir
            </Button>
            <Button type="submit" disabled={isLoading} loading={isLoading}>
              Continuar
            </Button>
          </div>
        </div>
      </form>
    </div>
  )
}
